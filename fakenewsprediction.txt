import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import nltk
from nltk.corpus import stopwords
import re

# Download NLTK data files
nltk.download('stopwords')

# Load the datasets
true_news = pd.read_csv('file:///C:\mamatha\projects\truenews.csv')
fake_news = pd.read_csv('file:///C:\mamatha\projects\FakeNews.csv')

# Add labels
true_news['label'] = 1
fake_news['label'] = 0

# Combine the datasets
news_data = pd.concat([true_news, fake_news])

# Shuffle the data
news_data = news_data.sample(frac=1).reset_index(drop=True)

# Preprocessing function to clean the text
def preprocess_text(text):
    text = re.sub(r'\W', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    text = text.lower()
    text = ' '.join([word for word in text.split() if word not in stopwords.words('english')])
    return text

# Apply the preprocessing to the text data
news_data['text'] = news_data['text'].apply(preprocess_text)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(news_data['text'], news_data['label'], test_size=0.2, random_state=42)

# Vectorize the text data using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)
import joblib

# Save the model and vectorizer
joblib.dump(model, 'fake_news_model.pkl')
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')
# Load the model and vectorizer
model = joblib.load('fake_news_model.pkl')
vectorizer = joblib.load('tfidf_vectorizer.pkl')

# Function to predict if a news article is fake or real
def predict_news(text):
    text = preprocess_text(text)
    text_tfidf = vectorizer.transform([text])
    prediction = model.predict(text_tfidf)
    return 'Real' if prediction[0] == 1 else 'Fake'

# Example usage
news_article = "Your news article text here"
print(predict_news(news_article))

